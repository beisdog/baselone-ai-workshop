{
  "name" : "Corin Hale",
  "careerinfo" : {
    "AdvertisingText" : "Mein Antrieb ist es, zuverlässige Produkte zu bauen, die einen Mehrwert für Nutzer generieren. Ich liebe es, komplexe Probleme bis zum Kern zu analysieren und einfache, langlebige Lösungen dafür zu entwickeln. Ich mag Herausforderungen und übernehme Verantwortung. Meine hohe Auffassungsgabe erlaubt es mir, mich schnell in ein neues technologisches und fachliches Umfeld einzuarbeiten. Die Zusammenarbeit mit geselligen Kollegen motiviert mich zu hoher Leistung.",
    "LongAdvertisingText" : "",
    "PreferredFunctions" : "Software-Ingenieur, Software-Architekt, Mentor, Projektleiter",
    "PreferredFunctionsList" : [ {
      "CodeListValueId" : 4235,
      "CodeListValueCaptionId" : 8193,
      "CodeListId" : 122,
      "FunctionName" : "Software-Ingenieur"
    }, {
      "CodeListValueId" : 3211,
      "CodeListValueCaptionId" : 8864,
      "CodeListId" : 122,
      "FunctionName" : "Software-Architekt"
    }, {
      "CodeListValueId" : 18733,
      "CodeListValueCaptionId" : 0,
      "CodeListId" : 122,
      "FunctionName" : "Mentor"
    }, {
      "CodeListValueId" : 4277,
      "CodeListValueCaptionId" : 9226,
      "CodeListId" : 122,
      "FunctionName" : "Projektleiter"
    } ],
    "PreferredSkills" : "",
    "CareerSummaryLabel" : "Bisheriger Werdegang & Bevorzugtes Einsatzgebiet",
    "HighlightsTextLabel" : "Highlights",
    "AdvertisingTextLabel" : "Werbetext für kurzer Lebenslauf",
    "LongAdvertisingTextLabel" : "Advertising Text Legacy",
    "PreferredFunctionsLabel" : "Bevorzugte Funktion",
    "PreferredSkillsLabel" : "Preferred skills"
  },
  "skills" : [ {
    "name" : "Scrum  level: Advanced"
  }, {
    "name" : "SOLID level: Intermediate"
  }, {
    "name" : "Test-Driven Development level: Intermediate"
  }, {
    "name" : ".NET level: Intermediate"
  }, {
    "name" : "ASP.NET Core level: Intermediate"
  }, {
    "name" : "C# level: Intermediate"
  }, {
    "name" : "Code Review level: Intermediate"
  }, {
    "name" : "Docker level: Intermediate"
  }, {
    "name" : "Git level: Intermediate"
  }, {
    "name" : "Jira level: Intermediate"
  }, {
    "name" : "Mantis level: Intermediate"
  }, {
    "name" : "Pattern level: Intermediate"
  }, {
    "name" : "React level: Intermediate"
  }, {
    "name" : "ReSharper level: Intermediate"
  }, {
    "name" : "SQL level: Intermediate"
  }, {
    "name" : "Teamcity level: Intermediate"
  }, {
    "name" : "TypeScript level: Intermediate"
  }, {
    "name" : "Visual Studio level: Intermediate"
  }, {
    "name" : ".NET Identity level: Intermediate"
  }, {
    "name" : "Azure Web Services level: Intermediate"
  }, {
    "name" : "Bitbucket CI level: Intermediate"
  }, {
    "name" : "Domain-Specific Language level: Intermediate"
  }, {
    "name" : "Entity Framework level: Intermediate"
  }, {
    "name" : "Figma level: Intermediate"
  }, {
    "name" : "Kanban level: Intermediate"
  }, {
    "name" : "Material UI level: Intermediate"
  }, {
    "name" : "Redux Toolkit Query level: Intermediate"
  }, {
    "name" : "RESTful API level: Intermediate"
  }, {
    "name" : "Storybook level: Intermediate"
  }, {
    "name" : "AngularJS level: Novice"
  }, {
    "name" : "Atlassian Confluence level: Novice"
  }, {
    "name" : "Elasticsearch level: Novice"
  }, {
    "name" : "Entity Framework ASP.NET level: Novice"
  }, {
    "name" : "Jenkins level: Novice"
  }, {
    "name" : "JetBrains AppCode level: Novice"
  }, {
    "name" : "Leadership level: Novice"
  }, {
    "name" : "Perl level: Novice"
  }, {
    "name" : "PostgreSQL level: Novice"
  }, {
    "name" : "Realm level: Novice"
  }, {
    "name" : "SQLite3 level: Novice"
  }, {
    "name" : "Swift 5 level: Novice"
  }, {
    "name" : "SwiftUI level: Novice"
  } ],
  "education" : [ {
    "Title" : "Master of Science in Informatik",
    "InstitutionTitle" : "Arcane University of Luminara",
    "Start" : "2009",
    "End" : "2011"
  }, {
    "Title" : "Bachelor of Science in Informatik",
    "InstitutionTitle" : "Arcane University of Luminara",
    "Start" : "2006",
    "End" : "2009"
  }, {
    "Title" : "Zweisprachige Matur, neusprachliches Profil",
    "InstitutionTitle" : "Wizard Gymnasium",
    "Start" : "2000",
    "End" : "2006"
  } ],
  "certificates" : [ {
    "Title" : "Zertifizierung als Scrum Master",
    "InstitutionTitle" : "Arcane Guild of Scrum Masters",
    "Start" : "2024",
    "End" : "2024"
  }, {
    "Title" : "Zertifizierung als Product Owner",
    "InstitutionTitle" : "Arcane Guild of Scrum Masters",
    "Start" : "2024",
    "End" : "2024"
  }, {
    "Title" : "Bescheinigung Führungskompetenz als Kompaniekommandant",
    "InstitutionTitle" : "Eldoria Technological Institute",
    "Start" : "2020",
    "End" : "2020"
  } ],
  "projects" : [ {
    "Name" : "asdf",
    "Start" : "11.2024",
    "End" : "",
    "Description" : "Der Kunde verwaltet umfangreiche technische Dokumentationen in verschiedenen Sprachen und Versionen. Für die Mitarbeiter werden projektbasiert Pakete von solchen Dokumenten exportiert. Die Mitarbeiter können Bemerkungen und Anhänge zu den Dokumenten erfassen und diese werden nach Projektende in die zentrale Datenbank reintegriert.\nDie Programmierung des Projekts wurde im Near-Shoring geleistet. Meine Aufgaben waren die",
    "Role" : "QA und Assistent der Projektleitung",
    "Industry" : "Öffentlicher Sektor",
    "Tasks" : [ ],
    "Methods" : [ ],
    "Technologies" : [ ]
  }, {
    "Name" : "Instandhaltung und Weiterentwicklung einer Web-Applikation",
    "Start" : "01.2023",
    "End" : "07.2024",
    "Description" : "Ich arbeitete für ein Schweizer FinTech-Unternehmen, das eine Direct Lending Plattform unterhielt. Nutzer waren sowohl externe Kreditnehmer und Investoren als auch interne Angestellte. Die Plattform wurde auf Azure gehostet und bestand aus zwei separaten Frontends und Backends, je eines für den externen und internen Gebrauch. Auf diese Weise konnten sich das Loginverhalten (Name/Passwort ggü. ActiveDirectory) und der funktionale Umfang in den beiden Applikation unterscheiden. Wir nutzten .NET 8, C# 12, das Entity Framwork und Microsoft Identity. Das Entwicklungsteam war klein und sehr dynamisch aufgestellt, mit einem wöchentlichen Release-Zyklus. Ich war der einzige Fullstack-Entwickler, während die anderen Entwickler sich entweder auf Frontend oder Backend konzentrierten. Mir gefiel es, neue Funktionalitäten umfassend zu entwickeln, von Design und Usability über die Schnittstellen im Rest API bis zu einer wartungsarmen Businesslogik und zugehörigem Datenmodell. Wir legten stets grossen Wert auf eine lückenlose Testabdeckung mit Unit Tests, Integration Tests (xUnit) bis hin zu automatisierten E2E Tests (Cypress) im Frontend. Ausserdem wurde jede Änderung am Code durch mehrere Mitarbeiter und den CTO geprüft, sowohl zur Qualitätssicherung als auch für den Wissensaustausch.",
    "Role" : "Full Stack Web-Entwickler",
    "Industry" : "Finanzwesen",
    "Tasks" : [ "Frontend & Backend Implementierung", "Verbessern der Testabdeckung", "Absprachen mit Stakeholdern", "Ausarbeiten von Designvorschlägen", "Definition des Datenmodells" ],
    "Methods" : [ "RESTful API", "Kanban", "Domain-Specific Language" ],
    "Technologies" : [ "Entity Framework", "Storybook", "Git", "ASP.NET Core", "React", "Figma", "Docker", "TypeScript", ".NET Identity", "Azure Web Services", "Redux Toolkit Query", "Material UI", "Bitbucket CI" ]
  }, {
    "Name" : "Hosting einer .NET/React Webapplikation auf einem Synology NAS",
    "Start" : "01.2024",
    "End" : "06.2024",
    "Description" : "Als Kompaniekommandant in der Eldoria Technological Institute ist es meine Aufgabe, die Angehörigen der Kompanie informiert zu halten und persönliche Belange wie Urlaubsgesuche mit jedem Einzelnen zu klären, je näher die Dienstleistung rückt. Die Digitalisierung der Armee macht Fortschritte, aber sie lief mir in diesem Punkt zu langsam ab, weshalb ich beschloss, eine eigene Webapplikation zu schreiben. Ich enschied mich für .NET/React mit einem sicheren Login über das Identity Framwork. Die Applikation wird via Docker auf einem NAS bei mir zuhause betrieben. Für die Datenspeicherung wählte ich das Entity Framework in Kombination mit SQLite auf einem Shared Volume. Die Applikation beinhaltet dynamischen Inhalt für jeden eingeloggten Benutzer und hält die Geheimhaltungsrichtlinien der Armee ein.",
    "Role" : "Software Engineer",
    "Industry" : "Privates Projekt",
    "Tasks" : [ "Hosting and Networking", "Design", "Implementation" ],
    "Methods" : [ ],
    "Technologies" : [ "SQLite3", "Git", "Entity Framework ASP.NET", "ASP.NET Core", "React", "Docker", "TypeScript" ]
  }, {
    "Name" : "Migration einer Web-Applikation auf neuen Technologie-Stack",
    "Start" : "01.2023",
    "End" : "11.2023",
    "Description" : "Der Kunde betreibt seit mehreren Jahren eine FinTech-Plattform auf Basis von Azure, .NET und React. Im Rahmen einer strategischen Partnerschaft mit einer Kantonalbank sollte die Plattform grundlegendend überarbeitet werden. So sollte die Plattform Multi-Tenant fähig werden, also sowohl im Namen des Kunden selbst als auch im Namen der Kantonalbank betrieben werden können, jeweils mit eigenen Daten und eigenem Erscheinungsbild. Zu diesem Zweck wurde das Frontend der Webapplikation auf einem neuen Tech Stack komplett neu geschrieben. Es wurde eine eigene Domain-Specific Language entwickelt, um die Design-Vorgaben des jeweiligen Tenants zu erfüllen. Im Verlauf der Arbeit wurde das Frontend teils restrukturiert, was sich stellenweise auch auf die Schnittstelle zum Backend auswirkte. Die fertigen Komponenten des UI wurden laufend mit Cypress E2E-Tests abgedeckt.",
    "Role" : "Full Stack Web-Entwickler",
    "Industry" : "Finanzwesen",
    "Tasks" : [ "Implementieren der Frontend-Pages", "Ausarbeiten von Designvorschlägen", "Anpassung der REST-Schnittstellen", "Erweiterung der Backend-Logik" ],
    "Methods" : [ "RESTful API", "Kanban", "Domain-Specific Language" ],
    "Technologies" : [ "Entity Framework", "Storybook", "Git", "ASP.NET Core", "React", "Figma", "Docker", "TypeScript", ".NET Identity", "Azure Web Services", "Redux Toolkit Query", "Material UI", "Bitbucket CI" ]
  }, {
    "Name" : "Persistieren und Synchronisieren von beliebigen relationalen Daten mit Swift",
    "Start" : "02.2021",
    "End" : "01.2023",
    "Description" : "Das Problem der Synchronisierung von Daten auf mehreren Geräten ist längst gelöst und es sind zahlreiche Frameworks verfügbar. Doch ich wollte genau verstehen, wo die Schwierigkeiten dabei liegen. Ich schrieb ein Framework in Swift mit der Absicht, es in privaten Projekten zu verwenden. Das Framework erlaubt es, beliebige relationale Daten in einer strikten Hierarchie zu speichern. Die Daten dürfen zirkuläre Referenzen enthalten, solange mindestens eine Referenz kein Eigentum repräsentiert. Es werden Migrationen am DB Schema und Inhalt unterstützt. Und zu guter Letzt erlaubt es das Framework, zwei DB Instanzen (typischerweise eine lokal und eine remote) zu synchronisieren, indem Objekte rekursiv anhand ID und Modifikationszeitstempfel verglichen werden.",
    "Role" : "Software Engineer",
    "Industry" : "Privates Projekt",
    "Tasks" : [ "Spezifikation des funktionalen Umfangs", "Komplette Implementierung", "Testen, manuell und automatisiert" ],
    "Methods" : [ ],
    "Technologies" : [ "Swift 5" ]
  }, {
    "Name" : "Entwicklung und Vertrieb einer nativen iOS-Applikation",
    "Start" : "06.2018",
    "End" : "12.2022",
    "Description" : "Der Kunde bietet eine Software-Lösung zur Verwaltung von digitalen Beweismitteln (Fotos, Videos, vereinzelt Audioaufnahmen) an, die von vielen Schweizer Polizeikorps genutzt wird. Das Produkt ist eine Web-App auf Basis von Perl und AngularJS. Als Ergänzung zur Webapplikation benutzte die Firma eine rudimentäre iOS-Applikation. Meine Aufgabe bestand darin, den funktionalen Umfang der iOS-App deutlich zu steigern, so dass diese als Aufnahmegerät (integrierte Kamera), wie auch als mobiles Nachschlagewerk für die Polizisten (Fahndungsmodul und Fall-Ordner) dienen konnte. Da ich der einzige iOS-Entwickler im Betrieb war, oblagen mir auch der Vertrieb über den Apple App Store, die Inbetriebnahme und Konfiguration bei Neukunden, sowie der Support bei jeglichen Problemen beim Endnutzer.\nDie besonderen Sicherheitsanforderungen von Blaulichtorganisationen boten verschiedene Herausforderungen. So wurde die Web-App nur auf eigenen Servern gehostet und die iOS-Geräte der Polizisten wurden über Mobile Device Management Systeme gesteuert, welche sich von Korps zu Korps unterschieden. Aus technischer Sicht war die Verwendung der Apple-internen AV-Bibliotheken zum Verwenden der im Gerät integrierten Kameralinsen fordernd. Für ein umfangreiches Testen der UI-Logik fehlten geeignete Tools, weshalb ein eigenes Framework entwickelt wurde.",
    "Role" : "iOS-Entwickler",
    "Industry" : "Blaulicht-Organisationen",
    "Tasks" : [ "Architektur", "Implementierung", "Vertrieb über AppStore und MDM", "Support und Kundenbetreuung", "Gelegentliche Mitarbeit an der Web-App", "Occasional development on the web app" ],
    "Methods" : [ "Test-Driven Development", "Scrum ", "SOLID" ],
    "Technologies" : [ "Atlassian Confluence", "Elasticsearch", "Perl", "Realm", "Jenkins", "PostgreSQL", "SwiftUI", "AngularJS", "JetBrains AppCode" ]
  }, {
    "Name" : "Instandhaltung und Weiterentwicklung einer umfangreichen Desktop-Applikation",
    "Start" : "10.2011",
    "End" : "05.2018",
    "Description" : "Der Kunde unterhielt eine Desktop-Applikation (C#/.NET, ) zur Risikoberechnung, welche von einer Vielzahl an Finanzinstituten weltweit genutzt wurde. Inhaltlich waren zum Beispiel Asset-Liability-Management, Zinsrisiko, Kreditrisiko und das regulatorische Liquiditätsrisiko (Basel III) abgedeckt. Der übliche Anwendungsfall lief vom Import oder manuellen Erfassen der Eingabedaten über die Konfiguration der gewünschten Analysen bis zur teils mehrstündigen Berechnung der Resultate, welche sich in verschiedenen Reports betrachten und exportieren liessen. Entsprechend umfangreich war der Code, welcher allein im funktionalen Bereich mehrere Hunderttausend Zeilen umfasste. Es wurde in 4 Scrum Teams parallel gearbeitet, sowohl in der Wartung und Fehlerbehebung, wie in der Weiterentwicklung von Funktionalitäten und ganzen Modulen. Das Entwicklerteam legte grossen Wert auf eine wohlüberlegte Typenarchitektur nach gängigen Clean Code-Prinzipien (SOLID, Gang of Four) und eine vorausschauende, hohe Wartbarkeit. Im funktionalen Bereich war eine hundertprozentige Abdeckung durch Unit Tests und Integration Tests erforderlich, um den hohen Qualitätsansprüchen gerecht zu werden.",
    "Role" : "Software-Entwickler",
    "Industry" : "Finanzwesen",
    "Tasks" : [ "Implementierung der Business Logik", "Design und Implementierung des UI", "Code Review", "Umfassende Testabdeckung", "Einfluss auf den Produkte-Backlog", "Unterstützung des PO beim Definieren der Stories" ],
    "Methods" : [ "Pattern", "Test-Driven Development", "Scrum ", "SOLID", "Code Review" ],
    "Technologies" : [ "C#", "SQL", "Visual Studio", ".NET", "ReSharper", "Mantis", "Teamcity", "Jira" ]
  }, {
    "Name" : "Vereinheitlichen von Fehlermeldungen und automatischer Fehlerkorrektur",
    "Start" : "04.2017",
    "End" : "08.2017",
    "Description" : "Der Kunde unterhielt eine umfangreiche Desktop-Applikation (C#/.NET) welche von zahlreichen Finanzinstituten eingesetzt wurde und eine Vielzahl an Konfigurationsmöglichkeiten bot. Die Konfiguration musste bestimmten Kriterien genügen und eine inhaltliche Konsistenz über mehrere Module und Screens verteilt aufweisen. Wenn diese Konsistenz nicht gegeben war, musste der Benutzer darauf hingewiesen werden. Die bestehende Implementation dieses Frameworks wurde von Grund auf überarbeitet. Die Fehlermeldungen wurden mit Metadaten versehen, um den Nutzer direkter zur Behebung des Fehlers zu lenken. Ferner wurde eingeführt, dass die Inkonsistenzen, wo möglich, automatisch behoben werden.",
    "Role" : "Software-Entwickler",
    "Industry" : "Finanzwesen",
    "Tasks" : [ "Requirement Analysis", "Solution Design", "Implementierung" ],
    "Methods" : [ "Pattern", "Test-Driven Development", "Scrum ", "SOLID", "Code Review" ],
    "Technologies" : [ "C#", "SQL", "Visual Studio", ".NET", "ReSharper", "Mantis", "Teamcity", "Jira" ]
  }, {
    "Name" : "Implementierung eines flexiblen Frameworks für das Generieren von Reports",
    "Start" : "11.2015",
    "End" : "07.2016",
    "Description" : "Der Kunde unterhielt eine umfangreiche Desktop-Applikation (C#/.NET) welche von zahlreichen Finanzinstituten eingesetzt wurde um multidimensionale Reports zu erstellen. Um die Reports in Funktionalität und Darstellung zu vereinheitlichen, wurde ein neues Framework erstellt. Die Reports enthielten eine oder mehrere Datenreihen, welche auf der Zeitskala auf verschiedene Weise aggregiert werden konnten (täglich, wöchentlich, monatlich, jährlich). Orthogonal dazu standen als Dimensionen beispielsweise die Buchhaltungs- oder Unternehmensstruktur und weitere zur Verfügung, wobei alle Dimensionen frei konfigurierbar als Zeilen, Spalten oder Filter dargestellt werden konnten. Per Doppelklick auf eine Zelle gelangte man zu einer Liste der darin vertretenden Positionen mit ihrem jeweiligen Beitrag zum Zellenwert. Zudem konnten Grafiken mit Trendlinien angezeigt und der gesamte Report in verschiedenen Formaten exportiert werden.",
    "Role" : "Software-Entwickler",
    "Industry" : "Finanzwesen",
    "Tasks" : [ "Requirement Analysis", "Solution Design", "Implementierung" ],
    "Methods" : [ "Pattern", "Test-Driven Development", "Scrum ", "SOLID", "Code Review" ],
    "Technologies" : [ "C#", "SQL", "Visual Studio", ".NET", "ReSharper", "Mantis", "Teamcity", "Jira" ]
  } ]
}